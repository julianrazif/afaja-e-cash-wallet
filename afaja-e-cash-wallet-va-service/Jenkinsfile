node {
    def mvnHome
    def dockerHome

    registry = "julianrazif/afaja-e-cash-wallet-va-service"
    registryCredential = 'julianrazifdockerhubcreds'

    TARGET_VERSION=''

    // make sure to setup global tool configuration for Maven with name 'M3' and Docker with name 'My Docker'
    stage('Preparation') {
        dockerHome = tool 'My Docker'

        withEnv(["DOCKER_HOME=dockerHome"]) {
            sh "docker version"
        }

        // Get some code from a GitHub repository
        git branch: 'main',
        credentialsId: 'ssh-gitlab-julianrazif',
        url: 'git@gitlab.com:julian.razif/afaja-e-cash-wallet.git'

        // Get the Maven tool.
        // ** NOTE: This 'M3' Maven tool must be configured
        // **       in the global configuration.
        mvnHome = tool 'M3'
    }

    stage('Build JAR') {
        // Run the maven build
        withEnv(["MVN_HOME=$mvnHome"]) {
            sh '"$MVN_HOME/bin/mvn" -B -Dmaven.test.failure.ignore clean package'
        }
    }

    stage('Build Docker') {
        // Run the docker build
        TARGET_VERSION='SIT-' + sh (
            returnStdout: true,
            script: 'echo "$(ls -d target/*.jar)" | sed \'s/target\\/afaja-e-cash-wallet-va-service-\\(.*\\).jar/\\1/\''
        ).trim()

        println TARGET_VERSION

        if (!TARGET_VERSION.isEmpty()) {
            sh (
                script: '''#!/bin/bash
                JARS = $(ls -d "target/afaja-e-cash-wallet-va-service"-*.jar)
                echo "done"
                echo $JARS
                if [ ${#JARS[@]} == 0 ];
                then
                  echo "No Jar file in "target" folder"
                  exit
                fi

                echo "Copying ${JARS[0]} to build folder"

                if [ ! -d "build" ]
                then
                  mkdir build
                fi
                cp "${JARS[0]}" build/afaja-e-cash-wallet-va-service.jar
                '''.stripIndent()
            )

            script {
                dockerImage = docker.build registry + ":" + TARGET_VERSION
            }
        }
    }

    stage('Push Docker Image') {
        script {
            docker.withRegistry('', registryCredential) {
                dockerImage.push(TARGET_VERSION)
                dockerImage.push('latest')
            }
        }
    }
}
